name: Wheel Builder
on:
  workflow_dispatch:
    inputs:
      version:
        required: true

jobs:
  # manylinux:
  #   runs-on: ubuntu-latest
  #   container: ${{ matrix.MANYLINUX.CONTAINER }}
  #   strategy:
  #     matrix:
  #       PYTHON: ["cp36-cp36m"]
  #       MANYLINUX:
  #         - NAME: manylinux2010_x86_64
  #           CONTAINER: "quay.io/pypa/manylinux2010_x86_64:2021-02-06-3d322a5"
  #         - NAME: manylinux2014_x86_64
  #           CONTAINER: "ghcr.io/pyca/cryptography-manylinux2014:x86_64"
  #   name: "${{ matrix.PYTHON }} for ${{ matrix.MANYLINUX.NAME }}"
  #   steps:
  #     - run: /opt/python/${{ matrix.PYTHON }}/bin/python -m pip install virtualenv
  #     - run: /opt/python/${{ matrix.PYTHON }}/bin/python -m virtualenv .venv
  #     - name: Install Python dependencies
  #       run: .venv/bin/pip install -U pip wheel cffi six ipaddress setuptools-rust
  #     - run: git clone https://github.com/ali-security/cryptography-5352.git
  #     - name: Checkout the base branch
  #       run: |
  #         cd cryptography-5352
  #         git checkout 3.4-base
  #     - name: Install Rust
  #       run: |
  #         yum install -y wget
  #         wget https://static.rust-lang.org/rustup/archive/1.23.1/x86_64-unknown-linux-gnu/rustup-init
  #         chmod +x rustup-init
  #         ./rustup-init -y --default-toolchain nightly-2021-01-25
  #     - run: mkdir tmpwheelhouse
  #     - run: |
  #         REGEX="cp3([0-9])*"
  #         if [[ "${{ matrix.PYTHON }}" =~ $REGEX ]]; then
  #             PY_LIMITED_API="--py-limited-api=cp3${BASH_REMATCH[1]}"
  #         fi
  #         cd cryptography*
  #         source $HOME/.cargo/env
  #         LDFLAGS="-L/opt/pyca/cryptography/openssl/lib" \
  #             CFLAGS="-I/opt/pyca/cryptography/openssl/include -Wl,--exclude-libs,ALL" \
  #             ../.venv/bin/python setup.py bdist_wheel $PY_LIMITED_API && mv dist/cryptography*.whl tmpwheelhouse
  #     - run: auditwheel repair --plat ${{ matrix.MANYLINUX.NAME }} tmpwheelhouse/cryptograph*.whl -w wheelhouse/
  #     - run: unzip wheelhouse/*.whl -d execstack.check
  #     - run: |
  #         results=$(execstack execstack.check/cryptography/hazmat/bindings/*.so)
  #         count=$(echo "$results" | grep -c '^X' || true)
  #         if [ "$count" -ne 0 ]; then
  #           exit 1
  #         else
  #           exit 0
  #         fi
  #     - run: .venv/bin/pip install cryptography --no-index -f wheelhouse/
  #     - run: |
  #         .venv/bin/python -c "from cryptography.hazmat.backends.openssl.backend import backend;print('Loaded: ' + backend.openssl_version_text());print('Linked Against: ' + backend._ffi.string(backend._lib.OPENSSL_VERSION_TEXT).decode('ascii'))"
  #     - run: mkdir cryptography-wheelhouse
  #     - run: mv wheelhouse/cryptography*.whl cryptography-wheelhouse/
  #     - uses: actions/upload-artifact@v4
  #       with:
  #         name: "cryptography-${{ github.event.inputs.version }}-${{ matrix.MANYLINUX.NAME }}-${{ matrix.PYTHON }}"
  #         path: cryptography-wheelhouse/

  macos:
    runs-on: macos-12
    strategy:
      matrix:
        PYTHON:
          - VERSION: '3.8'
            ABI_VERSION: 'cp36'
            DOWNLOAD_URL: 'https://www.python.org/ftp/python/3.8.2/python-3.8.2-macosx10.9.pkg'
            BIN_PATH: '/Library/Frameworks/Python.framework/Versions/3.8/bin/python3'
    name: "${{ matrix.PYTHON.VERSION }} ABI ${{ matrix.PYTHON.ABI_VERSION }} macOS"
    steps:
      - uses: actions/checkout@v3.1.0
      - run: |
          curl "$PYTHON_DOWNLOAD_URL" -o python.pkg
          sudo installer -pkg python.pkg -target /
        env:
          PYTHON_DOWNLOAD_URL: ${{ matrix.PYTHON.DOWNLOAD_URL }}
      - run: ${{ matrix.PYTHON.BIN_PATH }} -m pip install -U virtualenv requests
      - name: Download OpenSSL
        run: ${{ matrix.PYTHON.BIN_PATH }} .github/workflows/download_openssl.py macos openssl-macos-x86-64
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          default: true

      - run: ${{ matrix.PYTHON.BIN_PATH }} -m virtualenv venv
      - run: venv/bin/pip install -U pip wheel cffi six ipaddress setuptools-rust
      - name: Build the wheel
        run: |
          CRYPTOGRAPHY_SUPPRESS_LINK_FLAGS="1" \
              LDFLAGS="${HOME}/openssl-macos-x86-64/lib/libcrypto.a ${HOME}/openssl-macos-x86-64/lib/libssl.a" \
              CFLAGS="-I${HOME}/openssl-macos-x86-64/include -mmacosx-version-min=10.10 -march=core2" \
              venv/bin/python setup.py bdist_wheel --py-limited-api=${{ matrix.PYTHON.ABI_VERSION }} && mv dist/cryptography*.whl wheelhouse
      - run: ls -lA wheelhouse/
      - run: venv/bin/pip install -f wheelhouse --no-index cryptography
      - run: |
          venv/bin/python -c "from cryptography.hazmat.backends.openssl.backend import backend;print('Loaded: ' + backend.openssl_version_text());print('Linked Against: ' + backend._ffi.string(backend._lib.OPENSSL_VERSION_TEXT).decode('ascii'))"

      - run: mkdir cryptography-wheelhouse
      - run: mv wheelhouse/cryptography*.whl cryptography-wheelhouse/
      - uses: actions/upload-artifact@v4
        with:
          name: "cryptography-${{ github.event.inputs.version }}-macOS-${{ matrix.PYTHON.ABI_VERSION }}"
          path: cryptography-wheelhouse/

  windows:
    runs-on: windows-latest
    strategy:
      matrix:
        WINDOWS:
          - {ARCH: 'x86', WINDOWS: 'win32', RUST_TRIPLE: 'i686-pc-windows-msvc'}
          - {ARCH: 'x64', WINDOWS: 'win64', RUST_TRIPLE: 'x86_64-pc-windows-msvc'}
        PYTHON:
          - {VERSION: "3.8", MSVC_VERSION: "2019", "ABI_VERSION": "cp36"}
    name: "${{ matrix.PYTHON.VERSION }} ${{ matrix.WINDOWS.WINDOWS }} ${{ matrix.PYTHON.ABI_VERSION }}"
    steps:
      - uses: actions/checkout@v2
      - name: Setup python
        uses: actions/setup-python@v2.2.1
        with:
          python-version: ${{ matrix.PYTHON.VERSION }}
          architecture: ${{ matrix.WINDOWS.ARCH }}
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          default: true
          target: ${{ matrix.WINDOWS.RUST_TRIPLE }}

      - run: pip install requests
      - name: Download OpenSSL
        run: |
            python .github/workflows/download_openssl.py windows openssl-${{ matrix.WINDOWS.WINDOWS }}-${{ matrix.PYTHON.MSVC_VERSION }}
            echo "INCLUDE=C:/openssl_${{ matrix.WINDOWS.ARCH }}/include;$INCLUDE" >> $GITHUB_ENV
            echo "LIB=C:/openssl_${{ matrix.WINDOWS.ARCH }}/lib;$LIB" >> $GITHUB_ENV
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash

      - run: python -m pip install -U pip wheel cffi six ipaddress setuptools-rust
      - run: python setup.py bdist_wheel --py-limited-api=${{ matrix.PYTHON.ABI_VERSION }} && mkdir wheelhouse && mv dist/cryptography*.whl wheelhouse
      - run: DIR wheelhouse/
      - run: pip install -f wheelhouse --no-index cryptography
      - name: Print the OpenSSL we built and linked against
        run: |
            python -c "from cryptography.hazmat.backends.openssl.backend import backend;print('Loaded: ' + backend.openssl_version_text());print('Linked Against: ' + backend._ffi.string(backend._lib.OPENSSL_VERSION_TEXT).decode('ascii'))"

      - run: mkdir cryptography-wheelhouse
      - run: move wheelhouse\cryptography*.whl cryptography-wheelhouse\
      - uses: actions/upload-artifact@v4
        with:
          name: "cryptography-${{ github.event.inputs.version }}-${{ matrix.WINDOWS.WINDOWS }}-${{ matrix.PYTHON.VERSION }}-${{ matrix.PYTHON.ABI_VERSION}}"
          path: cryptography-wheelhouse\
      - name: "pytest"
        run: |
          python -m pip install iso8601 pretend pytz hypothesis pytest cryptography_vectors==3.4
          python -m pytest tests -k "not test_vector_version"
